{
  "version": 3,
  "file": "basicweb_app_tasks_client.css",
  "sources": [
    "../../PostMarkdown.html"
  ],
  "sourcesContent": [
    "<script>\n    import commonmark from \"commonmark\";\n    export let postId;\n    export let title = \"\";\n    export let description = \"\";\n    export let body = \"\";\n\n    const api = \"http://localhost:8080/api/v1\";\n\n    let postRequest = Promise.resolve(true);\n    let saveRequest;\n    let rendered = \"\";\n    let timer;\n    \n    const reader = new commonmark.Parser({smart: true});\n    const writer = new commonmark.HtmlRenderer({safe: true});\n\n    $: if (postId && !saveRequest) {\n        postRequest \n            = fetch(`${api}/posts/${postId}`)\n            . then( res => res.json() )\n            . then( res => {\n                title = res.title;\n                description = res.description;\n                body = res.body;\n                saveRequest = Promise.resolve(res);\n                return res;\n            });\n    }\n\n    $: {\n        if( timer ) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout( () => {\n            let parsed = reader.parse( body );\n            rendered = writer.render( parsed );\n        }, 250);\n    }\n\n    function savePost () {\n        if( title && description && body) {\n            let endpoint \n                = `${api}/posts`\n                + (postId ? `/${postId}` : \"\");\n\n            saveRequest\n                = fetch(endpoint,{\n                        method : \"POST\"\n                     ,  headers : {\n                            \"Content-Type\" : \"application/json\"\n                       }\n                     , credentials: \"same-origin\"\n                     , body : JSON.stringify({\n                           title\n                         , description\n                         , body\n                         , format : 1\n                        }) \n                 })\n                . then(res => res.json())\n                . then(res => {\n                        if( !postId ) \n                            postId = res.id;\n                        return res; \n                  });\n        }\n    }\n\n</script>\n<style>\n    label {\n        display: block;\n    }\n    textarea {\n        resize: none;\n    }\n    .editor {\n        height: 350px;\n        display: flex;\n    }\n    .editor > * {\n        flex-grow: 1;\n        width: 50%;\n        max-height: 100%;\n        overflow: auto;\n    }\n    .preview {\n        padding: 1rem;\n    }\n</style>\n\n{#await postRequest}\n<p>...</p>\n{:then}\n<label>Title <input bind:value={title} type=\"text\"></label>\n<label>Description <input bind:value={description} type=\"text\"></label>\n<label>Body</label>\n<div class=\"editor\">\n    <textarea bind:value={body}></textarea>\n    <div class=\"preview\">{@html rendered}</div>\n</div>\n<button on:click={savePost}>Save</button>\n{#if saveRequest}\n{#await saveRequest}\n<p>Saving...</p>\n{:then p}\n<p>Saved: {p.updated}</p>\n{:catch err}\n<p>Error: {err.message}</p>\n{/await}\n{/if}\n{:catch err}\n<p>Error: {err.message}</p>\n{/await}\n"
  ],
  "names": [],
  "mappings": "AAuEI,KAAK,4BAAC,CAAC,AACH,OAAO,CAAE,KAAK,AAClB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACN,MAAM,CAAE,IAAI,AAChB,CAAC,AACD,OAAO,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,AACjB,CAAC,AACD,qBAAO,CAAG,cAAE,CAAC,AACT,SAAS,CAAE,CAAC,CACZ,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,IAAI,AAClB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACN,OAAO,CAAE,IAAI,AACjB,CAAC"
}