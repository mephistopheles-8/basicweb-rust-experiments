{
  "version": 3,
  "file": "basicweb_biz_app_client.css",
  "sources": [
    "../../../client/Gallery.html",
    "../../../client/Leaflet.html",
    "../../../client/PostMarkdown.html"
  ],
  "sourcesContent": [
    "<script>\n    export let galleryId;\n    let galleryRequest;\n\n    $: if (galleryId) {\n        galleryRequest = Promise.all([\n             fetch(`http://localhost:8080/galleries/${galleryId}`)\n             .then(res => res.json())\n           ,  fetch(`http://localhost:8080/galleries/${galleryId}/items`)\n             .then(res => res.json())\n            ]);\n        }\n</script>\n<style>\n    figure {\n         overflow: hidden;\n         height: 200px;\n         width:300px;\n         margin:0;\n         cursor: pointer;\n    }\n    figure img {\n        max-width: 100%;\n        margin: 0 auto;\n        display: block;\n    }\n    .gallery {\n        display: flex;\n        flex-wrap: wrap;\n    }\n</style>\n{#await galleryRequest}\n<p>...</p>\n{:then [gallery,items]}\n<h3>{gallery.name}</h3>\n{#if gallery.description}\n<p>{gallery.description}</p>\n{/if}\n<div class=\"gallery\">\n    {#each items as item}\n    <figure>\n        <figcaption>{item[2].name}</figcaption>\n        <img src=\"/assets/{item[2].uuid}\">\n    </figure>\n    {/each}\n</div>\n{:catch err}\n<p>Error: {err.message}</p>\n{/await}\n",
    "<script>\n    import { onMount } from 'svelte';\n    import Leaflet from \"leaflet\";\n\n    export const OpenStreetMap = \"OpenStreetMap\";\n    export const StamenToner   = \"StamenToner\";\n    export const NationalMap   = \"NationalMap\";\n\n    const L = Leaflet;\n\n    export let mapType = OpenStreetMap;\n    // read only\n    export let map;\n\n    let mapElement;\n    let markers = [];\n\n    function openStreetMapSetup( map ) {\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(map);\n    }\n\n    function stamenTonerSetup( map ) {\n        var attribution \n            = `Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, `\n            + `under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. `\n            + `Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, `\n            + `under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.`;\n\n        var tnmBasemapViewer = L.tileLayer(\n            'http://tile.stamen.com/toner/{z}/{x}/{y}.png', {\n                attribution: attribution\n                }).addTo(map);\n    }\n\n    function nationalMapSetup( map ) {\n       // Define the TNM Layers\n        var attribution \n            = `<a href=\"https://www.doi.gov\">U.S. Department of the Interior</a>` \n            + `| <a href=\"https://www.usgs.gov\">U.S. Geological Survey</a>`\n            + `| <a href=\"https://www.usgs.gov/laws/policies_notices.html\">Policies</a>`;\n\n\n        var tnmBasemapViewer = L.tileLayer(\n            'https://basemap.nationalmap.gov/ArcGIS/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}', {\n                maxZoom: 14,\n                attribution: attribution\n                });\n\n        var tnmBasemapNavigator = L.tileLayer(\n            'https://navigator.er.usgs.gov/tiles/tcr.cgi/{z}/{x}/{y}.png', {\n                maxZoom: 20,\n                attribution: attribution\n                });\n\n        // Add overlays\n        var highways = L.tileLayer.wms(\n            \"https://services.nationalmap.gov/ArcGIS/services/transportation/MapServer/WMSServer?\", {\n            layers: '6',\n            format: 'image/png',\n            transparent: true,\n        });\n\n        // Add baselayers and overlays to groups\n        var baseLayers = {\n            \"The National Map (Viewer)\" : tnmBasemapViewer,\n            \"The National Map (Navigator)\" : tnmBasemapNavigator\n        };\n        var overlays = {\n            \"Highways\": highways\n        };\n        var controlLayers = L.control.layers(baseLayers, overlays);\n\n        // Add the main baselayer to the map as a default (so it loads when the map\n        // is loaded\n        tnmBasemapViewer.addTo(map);\n\n        // Add the layer selector control to the map\n        controlLayers.addTo(map);\n\n    } // end [nationalMapSetup]\n\n    export function getMap () {\n        return map;\n    }\n    \n    export function leaflet ( ) {\n        return L;\n    }\n    \n    export function icon ( opts ) {\n        return L.icon(opts);\n    }\n    \n    export function divIcon ( opts ) {\n        return L.divIcon(opts);\n    }\n    \n    export function getBounds() {\n        return map.getBounds();\n    }\n    \n    export function fitBounds( bounds, opts ) {\n        return map.fitBounds( bounds, opts );\n    }\n\n    export function zoomToLocation( latlng, zoom = 14 ) {\n        map.setView(latlng, zoom)\n    }\n\n    export function addMarker( latlng, opts ) {\n        let marker = L.marker(latlng,opts).addTo(map);\n        markers.push( marker );\n    }\n\n    export function clearMarkers() {\n        markers.forEach((m) => map.removeLayer(m) );\n    }\n\n\tonMount(() => {\n        map = L.map(mapElement).setView([35.513151077520035, -96.416015625], 3);\n        switch( mapType ) {\n        case OpenStreetMap:\n            openStreetMapSetup( map );\n            break;\n        case StamenToner:\n            stamenTonerSetup( map );\n            break;\n        case NationalMap:\n            nationalMapSetup( map );\n            break;\n        default: throw \"[Leaflet.onMount] Unknown map type\";\n        }\n\t});\n</script>\n<style>\n.map-container {\n    height: 300px;\n}\n</style>\n\n<div class=\"map-container\" bind:this={mapElement}></div>\n",
    "<script>\n    import commonmark from \"commonmark\";\n    export let postId;\n    export let title = \"\";\n    export let description = \"\";\n    export let body = \"\";\n\n    const api = \"http://localhost:8080/api/v1\";\n\n    let postRequest = Promise.resolve(true);\n    let saveRequest;\n    let rendered = \"\";\n    let timer;\n    \n    const reader = new commonmark.Parser({smart: true});\n    const writer = new commonmark.HtmlRenderer({safe: true});\n\n    $: if (postId && !saveRequest) {\n        postRequest \n            = fetch(`${api}/posts/${postId}`)\n            . then( res => res.json() )\n            . then( res => {\n                title = res.title;\n                description = res.description;\n                body = res.body;\n                saveRequest = Promise.resolve(res);\n                return res;\n            });\n    }\n\n    $: {\n        if( timer ) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout( () => {\n            let parsed = reader.parse( body );\n            rendered = writer.render( parsed );\n        }, 250);\n    }\n\n    function savePost () {\n        if( title && description && body) {\n            let endpoint \n                = `${api}/posts`\n                + (postId ? `/${postId}` : \"\");\n\n            saveRequest\n                = fetch(endpoint,{\n                        method : \"POST\"\n                     ,  headers : {\n                            \"Content-Type\" : \"application/json\"\n                       }\n                     , credentials: \"same-origin\"\n                     , body : JSON.stringify({\n                           title\n                         , description\n                         , body\n                         , format : 1\n                        }) \n                 })\n                . then(res => res.json())\n                . then(res => {\n                        if( !postId ) \n                            postId = res.id;\n                        return res; \n                  });\n        }\n    }\n\n</script>\n<style>\n    label {\n        display: block;\n    }\n    textarea {\n        resize: none;\n    }\n    .editor {\n        height: 350px;\n        display: flex;\n    }\n    .editor > * {\n        flex-grow: 1;\n        width: 50%;\n        max-height: 100%;\n        overflow: auto;\n    }\n    .preview {\n        padding: 1rem;\n    }\n</style>\n\n{#await postRequest}\n<p>...</p>\n{:then}\n<label>Title <input bind:value={title} type=\"text\"></label>\n<label>Description <input bind:value={description} type=\"text\"></label>\n<label>Body</label>\n<div class=\"editor\">\n    <textarea bind:value={body}></textarea>\n    <div class=\"preview\">{@html rendered}</div>\n</div>\n<button on:click={savePost}>Save</button>\n{#if saveRequest}\n{#await saveRequest}\n<p>Saving...</p>\n{:then p}\n<p>Saved: {p.updated}</p>\n{:catch err}\n<p>Error: {err.message}</p>\n{/await}\n{/if}\n{:catch err}\n<p>Error: {err.message}</p>\n{/await}\n"
  ],
  "names": [],
  "mappings": "AAcI,MAAM,4BAAC,CAAC,AACH,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,KAAK,CACb,MAAM,KAAK,CACX,OAAO,CAAC,CACR,MAAM,CAAE,OAAO,AACpB,CAAC,AACD,oBAAM,CAAC,GAAG,cAAC,CAAC,AACR,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,KAAK,AAClB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AACnB,CAAC;AC4GL,cAAc,cAAC,CAAC,AACZ,MAAM,CAAE,KAAK,AACjB,CAAC;ACpEG,KAAK,4BAAC,CAAC,AACH,OAAO,CAAE,KAAK,AAClB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACN,MAAM,CAAE,IAAI,AAChB,CAAC,AACD,OAAO,4BAAC,CAAC,AACL,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,AACjB,CAAC,AACD,qBAAO,CAAG,cAAE,CAAC,AACT,SAAS,CAAE,CAAC,CACZ,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,IAAI,AAClB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACN,OAAO,CAAE,IAAI,AACjB,CAAC"
}