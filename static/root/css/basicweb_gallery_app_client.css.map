{
  "version": 3,
  "file": "basicweb_gallery_app_client.css",
  "sources": [
    "../../../client/Gallery.html",
    "../../../client/UserGallery.html",
    "../../../client/PostMarkdown.html",
    "../../../client/Tags.html",
    "../../../client/Profile.html",
    "../../../client/UserItemList.html",
    "../../../client/Masonry.html",
    "../../../client/UserItemForm.html",
    "../../../client/AlertConfirm.html",
    "../../../client/Modal.html"
  ],
  "sourcesContent": [
    "<script>\n    import { fade } from \"svelte/transition\";\n    import Lazy from \"svelte-lazy\";\n    export let galleryId;\n    const api = \"http://localhost:8080/api/v1\";\n\n    let galleryRequest;\n    let displayItem;\n\n    $: if (galleryId) {\n        galleryRequest = Promise.all([\n            fetch(`${api}/galleries/${galleryId}`)\n             .then(res => res.json())\n         ,  fetch(`${api}/galleries/${galleryId}/items`)\n             .then(res => res.json())\n            ]);\n        }\n\n    function showModal( item ) {\n        displayItem = item;\n    }\n    function hideModal() {\n        displayItem = null;\n    }\n</script>\n<style>\n    figure {\n         overflow: hidden;\n         margin:0;\n         cursor: pointer;\n    }\n    .card-image img {\n        margin: 0 auto;\n        display: block;\n        height: 400px;\n        width: 600px;\n        object-fit: cover;\n    }\n    .shadow-box {\n        position:fixed;\n        top:0;\n        bottom:0;\n        left:0;\n        right:0;\n        background: rgba(30,30,30,0.8);\n        padding: 50px;\n    }\n    .fullscreen-image {\n        width: 100%;\n        height: 100%;\n    }\n    .fullscreen-image img {\n        width: 100%;\n        height: 100%;\n        object-fit: contain;\n    }\n    .info-panel {\n        background: #000;\n        color: #FFF;\n    }\n    .gallery-img {\n        height:0;\n        padding-top: 56.25%;\n        background-repeat:no-repeat;\n        background-size:cover;\n        overflow:hidden;\n    }\n    .gallery-img-card {\n        width: 250px;\n    }\n    .gallery {\n        display: flex;\n        flex-wrap: wrap;\n    }\n</style>\n{#await galleryRequest}\n<p>...</p>\n{:then info}\n<h3>{info[0].name}</h3>\n{#if info[0].description}\n<p>{info[0].description}</p>\n{/if}\n<div class=\"gallery\">\n    {#each info[1] as item}\n        <figure class=\"card-image\" on:click={(e) => showModal(item[2])}>\n            <Lazy height={400}>\n                 <img alt={item[2].description} src=\"/assets/{item[2].uuid}\">\n            </Lazy>\n            <figcaption>{item[2].name}</figcaption>\n        </figure>\n    <!-- NOTE: still need to check compatibility of object-fit; otherwise we can use this -->\n    <!--\n    <div class=\"gallery-img-card\">\n        <div class=\"gallery-img\" style=\"background-image: url(/assets/{item[2].uuid});\"></div>\n        <p>{item[2].name}</p>\n    </div>\n    -->\n    {/each}\n</div>\n{:catch err}\n<p>Error: {err.message}</p>\n{/await}\n\n{#if displayItem}\n<div transition:fade=\"{{ duration: 200 }}\" class=\"shadow-box\" on:click={hideModal}>\n    <div class=\"fullscreen-image\">\n        <img src=\"/assets/{displayItem.uuid}\" alt=\"{displayItem.description}\">\n    </div>\n</div>\n{/if}\n",
    "<script>\n    import { fade } from \"svelte/transition\";\n    //import Lazy from \"svelte-lazy\";\n    import UserGalleryItemList from \"./UserGalleryItemList.html\";\n\n    export let galleryId;\n    const api = \"http://localhost:8080/api/v1\";\n    \n    let galleryRequest;\n    let displayItem;\n\n    $: if (galleryId) {\n        galleryRequest = Promise.all([\n            fetch(`${api}/galleries/${galleryId}`)\n             .then(res => res.json())\n         ,  fetch(`${api}/galleries/${galleryId}/items`)\n             .then(res => res.json())\n            ]);\n        }\n\n    function refreshGallery() {\n        let gid = galleryId;\n        galleryId = null;\n        galleryId = gid;\n    }\n    function showModal( item ) {\n        displayItem = item;\n    }\n\n    function hideModal() {\n        displayItem = null;\n    }\n</script>\n<style>\n    figure {\n         overflow: hidden;\n         margin:0;\n         cursor: pointer;\n    }\n    .card-image img {\n        margin: 0 auto;\n        display: block;\n        height: 200px;\n        width: 300px;\n        object-fit: cover;\n    }\n    .shadow-box {\n        position:fixed;\n        top:0;\n        bottom:0;\n        left:0;\n        right:0;\n        background: rgba(30,30,30,0.8);\n        padding: 50px;\n    }\n    .fullscreen-image {\n        width: 100%;\n        height: 100%;\n    }\n    .fullscreen-image img {\n        width: 100%;\n        height: 100%;\n        object-fit: contain;\n    }\n    .info-panel {\n        background: #000;\n        color: #FFF;\n    }\n    .gallery-img {\n        height:0;\n        padding-top: 56.25%;\n        background-repeat:no-repeat;\n        background-size:cover;\n        overflow:hidden;\n    }\n    .gallery-img-card {\n        width: 250px;\n    }\n    .gallery {\n        display: flex;\n        flex-wrap: wrap;\n    }\n    .gallery-panel {\n        display: flex;\n    }\n</style>\n{#await galleryRequest}\n<p>...</p>\n{:then info}\n<h3>{info[0][1].name}</h3>\n{#if info[0][1].description}\n<p>{info[0][1].description}</p>\n{/if}\n<div class=\"gallery-panel\">\n    <div>\n        <UserGalleryItemList {galleryId} on:orderSubmitted={refreshGallery} />\n    </div>\n    <div>\n        <div class=\"gallery\">\n            {#each info[1] as item}\n                <figure class=\"card-image\" on:click={(e) => showModal(item[2])}>\n                    <!-- FIXME: svelte-lazy goes here -->\n                     <img alt={item[2].description} src=\"/user/assets/{item[2].uuid}\">\n                    <figcaption>{item[2].name}</figcaption>\n                </figure>\n            {/each}\n        </div>\n    </div>\n</div>\n{:catch err}\n<p>Error: {err.message}</p>\n{/await}\n\n{#if displayItem}\n<div transition:fade=\"{{ duration: 200 }}\" class=\"shadow-box\" on:click={hideModal}>\n    <div class=\"fullscreen-image\">\n        <img src=\"/user/assets/{displayItem.uuid}\" alt=\"{displayItem.description}\">\n    </div>\n</div>\n{/if}\n",
    "<script>\n    import commonmark from \"commonmark\";\n\n    export let id;\n    export let body;\n\n    let rendered = \"\";\n    let timer;\n    \n    const reader = new commonmark.Parser({smart: true});\n    const writer = new commonmark.HtmlRenderer({safe: true});\n\n    $: {\n        if( timer ) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout( () => {\n            let parsed = reader.parse( body );\n            rendered = writer.render( parsed );\n        }, 250);\n    }\n\n</script>\n<style>\n    textarea {\n        resize: none;\n    }\n    .editor {\n        height: 350px;\n        display: flex;\n    }\n    .editor > * {\n        flex-grow: 1;\n        width: 50%;\n        max-height: 100%;\n        overflow: auto;\n    }\n    .preview {\n        padding: 1rem;\n    }\n</style>\n<div class=\"editor\">\n    <textarea id={id} bind:value={body}></textarea>\n    <div class=\"preview\">{@html rendered}</div>\n</div>\n",
    "<script>\n    export let id; // id for form elm\n    export let tags = [];\n    let value = \"\";\n\n    function clearTag(ind) {\n        tags.splice(ind,1);\n        tags = tags;\n    }\n    function keyHandler(e) {\n        let trimmed = value.trim();\n        // Confirm a tag on enter or comma\n        if( trimmed.length > 0 && (e.keyCode === 13 || e.key === \",\") ){\n            tags.push(trimmed);\n            value = \"\";\n            tags = tags;\n            e.preventDefault();\n\n        // Delete a tag with backspace\n        }else if (e.keyCode === 8 && value.length === 0){\n            tags.pop();\n            tags = tags;\n\n        // Make commas invalid from within tags\n        }else if ( e.key === \",\" ){\n            e.preventDefault();\n        }\n    }\n</script>\n<style>\n    .tags-editor {\n        border: solid 1px #ccc;\n        width: 173px;\n       overflow:hidden; \n    }\n    input {\n        -moz-appearance:none;\n        -webkit-appearance:none;\n        appearance:none;\n        border-style: none;\n        box-sizing: border-box;\n        flex-grow: 1;\n    }\n    .tags-editor, ul {\n        display: inline-flex;\n        vertical-align: bottom;\n        margin-bottom: -0.1rem;\n    }\n    ul {\n        list-style-type: none;\n        margin: 0; padding: 0;\n    }\n    li {\n        background: #ddd;\n        margin:0 0.2em;\n        transition: background 0.5s;\n        border-radius:0.4em;\n        cursor: pointer;\n    }\n    li:hover {\n        background: #efefef;\n    }\n</style>\n<div class=\"tags-editor\">\n    <ul class=\"tags-listing\">\n        {#each tags as tag,i}\n        <li on:click={(e) => clearTag(i)}>{tag}</li>\n        {/each}\n    </ul>\n    <input id={id} bind:value={value} on:keydown={keyHandler} type=\"text\">\n</div>\n",
    "<script>\n    import Alert from \"svelte-material-icons/Alert.svelte\";\n    import { Circle } from 'svelte-loading-spinners';\n    import Masonry from \"./Masonry.html\";\n\n    const api = \"http://localhost:8080/api/v1\";\n\n    export let handle;\n    export let iconSize = 24;\n    \n    let requests;\n    let galleryRequest;\n    let galleryUrl;\n    let firstGallery;\n\n    $: if(handle) {\n        requests = Promise.all([\n            fetch(`${api}/u/${handle}/galleries`)\n            .then( res => res.json() )\n          , fetch(`${api}/u/${handle}/posts`)\n            .then( res => res.json() )\n        ]).then(([galleries,posts]) => {\n            let g0s = galleries.filter( g0 => g0[0].url );\n            let p0s = posts.filter( g0 => g0[0].url );\n\n            if( g0s.length > 0 ) {\n                galleryUrl = g0s[0][0].url;\n                firstGallery = g0s[0];\n                galleryRequest \n                  = fetch(`${api}/u/${handle}/galleries/${galleryUrl}/items`)\n                    .then( res => res.json() );\n            }\n\n            return [g0s, p0s];\n        });\n    }\n    function masonryItems(items) {\n        return items.map( item => {\n            let name = item[2].name;\n            let description = item[2].name;\n            let src = `/u/${handle}/galleries/${galleryUrl}/items/${item[3].url}`;\n            return {name,description,src};\n        });\n    }\n</script>\n<style>\n    .error {\n        display:flex;\n        color:#800;\n    }\n    .profile-main {\n        display: flex;\n    }\n    .first-gallery, .left-sidebar {\n        padding: 0.5rem 1rem;\n    }\n    .first-gallery{\n        flex-grow: 1;\n        background: var(--bg-color-1);\n        color: var(--fg-color-1);\n    }\n    .left-sidebar {\n        width: 16rem;\n    }\n</style>\n{#if requests}\n{#await requests}\n<Circle color=\"var(--accent-color-1)\" size={iconSize} />\n{:then [galleries,posts]}\n<div class=\"profile-main\">\n    <div class=\"left-sidebar\">\n        {#if galleries.length > 0}\n        <h3>Galleries</h3>\n        <ul>\n            {#each galleries as gallery}\n            <li><a href=\"/u/{handle}/galleries/{gallery[0].url}\">{gallery[1].name}</a></li>\n            {/each}\n        </ul>\n        {/if}\n        {#if posts.length > 0}\n        <h3>Posts</h3>\n        <ul>\n            {#each posts as post}\n            <li><a href=\"/u/{handle}/posts/{post[0].url}\">{post[1].title}</a></li>\n            {/each}\n        </ul>\n        {/if}\n    </div>\n    {#if galleryRequest}\n    <div class=\"first-gallery\">\n        {#await galleryRequest}\n        <Circle color=\"var(--accent-color-1)\" size={iconSize} />\n        {:then items}\n        <h2>{firstGallery[1].name}</h2>\n        <Masonry items={masonryItems(items)} />\n        {:catch err}\n        <div class=\"error\">\n            <Alert color=\"#F80\" size={iconSize} />\n            <p>Error: {err.message}</p>\n        </div>\n        {/await}\n    </div>\n{/if}\n</div>\n{:catch err}\n<div class=\"error\">\n    <Alert color=\"#F80\" size={iconSize} />\n    <p>Error: {err.message}</p>\n</div>\n{/await}\n{/if}\n",
    "<script>\n    import { createEventDispatcher } from 'svelte';\n    import Alert from \"svelte-material-icons/Alert.svelte\";\n    import Delete from \"svelte-material-icons/Delete.svelte\";\n    import ReorderHorizontal from \"svelte-material-icons/ReorderHorizontal.svelte\";\n    import PencilOutline from \"svelte-material-icons/PencilOutline.svelte\";\n    import { Circle } from 'svelte-loading-spinners';\n    import UserItemForm from \"./UserItemForm.html\";\n    import DndListSort from \"./DndListSort.html\";\n    import AlertConfirm from \"./AlertConfirm.html\";\n    import Modal from \"./Modal.html\";\n\n    const api = \"http://localhost:8080/api/v1\";\n\tconst dispatch = createEventDispatcher();\n\n    export let itemNamePlural;\n    export let itemNameSingular;\n\n    export let listingEndpoint = itemNamePlural;\n    export let processItems = (g) => {\n       let g1 = g[1];\n       g1.ord = g[0].ord;\n       return g1; \n    };\n\n    export let iconSize = 24;\n\n    export let deleteHandler = (item)  => {\n        itemsReq \n          = fetch(\n          `${api}/${itemNamePlural}/${item.uuid}`, {\n                method : \"DELETE\"\n             ,  headers : {\n                    \"Content-Type\" : \"application/json\"\n               }\n             , credentials: \"same-origin\"\n            }).then( res => { \n                if (!res.ok)\n                    throw `Server responded with status ${res.status}`;\n                return fetchItems();\n            });\n    }\n    export let processItemCallback;\n\n    export let itemInfoExtractCallback;\n\n    let items = [];\n\n    let itemsReq \n        = fetchItems(); \n\n    let deleteItem = null;\n    let editItem = null;\n    let orderHasChanged = false;\n\n    function orderChanged () {\n        orderHasChanged = true;\n        dispatch(\"orderChanged\");\n    }\n\n    function fetchItems() {\n        return fetch( `${api}/${listingEndpoint}` )\n           .then( res => res.json() )\n           .then( g0s => {\n                items = g0s.map(processItems);\n                return items;\n            });\n    }\n\n\n    function handleSortConsider(e) {\n        items = e.detail.items;\n    }\n\n    function handleSortFinalize(e) {\n        items = e.detail.items;\n    }\n\n\n    function submitOrder(e) {\n        let orders \n            = items\n            . reduce((g0s,g0,i) => {\n                if(g0.ord !== i)\n                    g0s.push({ uuid : g0.uuid, ord : i });\n                return g0s;\n             }, []);\n\n        itemsReq \n          = fetch(\n          `${api}/${itemNamePlural}/reorder`, {\n                method : \"POST\"\n             ,  headers : {\n                    \"Content-Type\" : \"application/json\"\n               }\n             , credentials: \"same-origin\"\n             , body : JSON.stringify(orders)\n            }).then( res => { \n                if (!res.ok)\n                    throw `Server responded with status ${res.status}`;\n                let r0 = fetchItems();\n                dispatch(\"orderSubmitted\");\n                return r0;\n            });\n    }\n    function deleteConfirm( ) {\n        deleteHandler(deleteItem);\n        deleteItem = null;\n    }\n    function deleteCancel( ) {\n        deleteItem = null;\n    }\n</script>\n<style>\n    .item-list-item button {\n        -moz-appearance:none;\n        -webkit-appearance:none;\n        appearance:none;\n        cursor:pointer;\n        border-style:none;\n        background:transparent;\n    }\n    .item-list-item {\n        background: var(--bg-color-3);\n        display: flex;\n        font-size: 1rem;\n        border: dotted 1px var(--accent-color-0);\n        border-left: solid 0.25rem var(--accent-color-1);\n        transition: all 0.25s;\n        max-width: 350px;\n    }\n    .item-list-item:hover {\n        background: var(--fg-color-1);\n        border-left-color: var(--accent-color-2);\n    }\n    .item-list-item > * {\n        font-size: 1rem;\n    }\n    .item-list-info > * {\n        padding: 0 0.5rem;\n    }\n    .item-list-item a {\n        flex-grow: 1;\n        color: var(--fg-color-3);\n    }\n    .error {\n        display: flex;\n        color:#800;\n    }\n</style>\n{#await itemsReq}\n<Circle color=\"var(--accent-color-1)\" size={iconSize} />\n{:then _}\n<DndListSort bind:items={items} let:item={item} on:finalize={orderChanged}>\n    <div class=\"item-list-item\">\n        <button>\n            <ReorderHorizontal color=\"var(--accent-color-1)\" size={iconSize} />\n        </button>\n        <slot {item}>\n            <a href=\"/user/{itemNamePlural}/{item.uuid}\">\n                <div class=\"item-list-info\">\n                    <h6>{item.name}</h6>\n                    <p>{item.description}</p>\n                </div>\n            </a>\n        </slot>\n        <button class=\"edit-button\" type=\"button\" on:click={e => {editItem = item;}}><PencilOutline size={iconSize} /></button>\n        <button class=\"delete-button\" type=\"button\" on:click={e => {deleteItem = item;}}><Delete size={iconSize} /></button>\n    </div>\n</DndListSort>\n{#if orderHasChanged}\n<button type=\"button\" on:click={submitOrder}>Save Order</button>\n{/if}\n{:catch err}\n<div class=\"error\">\n    <Alert color=\"#F80\" size={iconSize} />\n    <p>Error: {err.message}</p>\n</div>\n{/await}\n\n<AlertConfirm \n    shown={deleteItem !== null} \n    message=\"Are you sure you want to delete this {itemNameSingular}? This action cannot be undone.\" \n    on:confirm={deleteConfirm} \n    on:cancel={deleteCancel} />\n\n\n<Modal shown={editItem !== null} >\n<UserItemForm \n    {itemNamePlural} \n    {itemNameSingular} \n    {itemInfoExtractCallback} \n    {processItemCallback} \n    itemId={editItem.uuid} \n    on:cancel={e => {editItem = null;}} />\n</Modal>\n\n\n",
    "<script>\n    import { onMount } from 'svelte'; \n    import Masonry from \"masonry-layout\";\n    import Lazy from \"svelte-lazy\";\n\n    export let items;\n    export let columnWidth = 300;\n    export let captionsOn = false;\n    let masonry;\n    let masonryElm;\n    let mounted = false;\n    let loaded = 0;\n\n    $: if(masonryElm && mounted && items && loaded === items.length) {\n        masonry = new Masonry( masonryElm, {\n          itemSelector: '.card-image',\n          columnWidth,\n          fitWidth: true,\n          resize: true\n        });\n    }\n    function loadedInc() {\n        loaded++;\n    }\n\n    onMount(() => {\n        mounted = true;\n    });\n</script>\n<style>\n    figure {\n         overflow: hidden;\n         margin:0;\n         cursor: pointer;\n    }\n    .card-image img {\n        margin: 0 auto;\n        display: block;\n        object-fit: cover;\n        width: 300px;\n    }\n    .card-image:first-of-type img {\n        width: 600px;\n    }\n    .hidden {\n        visibility:hidden;\n    }\n</style>\n{#if items && items.length}\n<div bind:this={masonryElm} class:hidden={loaded !== items.length}>\n    {#each items as item}\n    <figure class=\"card-image\">\n        <!-- FIXME: svelte-lazy goes here -->\n        <img alt={item.description} src=\"{item.src}\" on:load={e => {loaded++;}}>\n        {#if captionsOn}\n        <figcaption>{item.name}</figcaption>\n        {/if}\n    </figure>\n   {/each}\n</div>\n{/if}\n",
    "<script>\n    import { createEventDispatcher } from 'svelte';\n    import Unique from \"./Unique.html\";\n    import Tags from \"./Tags.html\";\n    import Permissions from \"./Permissions.html\";\n\n\tconst dispatch = createEventDispatcher();\n    const api = \"http://localhost:8080/api/v1\";\n\n    export let itemId;\n    export let itemNamePlural;\n    export let itemNameSingular;\n    export let legend = `Update ${itemNameSingular}`;\n    export let submitText = \"Save\";\n    export let cancelText = \"Cancel\";\n\n    export let itemRequest;\n    export let submitHandler = (item,dispatch) => {\n        let [itemInfo,userItemInfo] = itemInfoExtract(item); \n           \n        itemRequest =\n          fetch(\n              `${api}/${itemNamePlural}/${itemId}`, {\n                method : \"POST\"\n             ,  headers : {\n                    \"Content-Type\" : \"application/json\"\n               }\n             , credentials: \"same-origin\"\n             , body : JSON.stringify([itemInfo,userItemInfo])\n            }).then( res => res.json() )\n              .then( _ => \n                  fetch(\n                    `${api}/${itemNamePlural}/${itemId}/tags`, {\n                        method : \"POST\"\n                     ,  headers : {\n                            \"Content-Type\" : \"application/json\"\n                       }\n                     , credentials: \"same-origin\"\n                     , body : JSON.stringify(tags)\n                    }).then( res => res.json() )\n               );\n    };\n    export let itemIsValid = (item) => {\n        return item[1].name.length > 0; \n    };\n    export let processItemCallback = (item) => item;\n\n    export let itemInfoExtractCallback = (item) => {\n        let itemInfo = {\n            kind : item[1].kind\n          , name : item[1].name\n          , description : item[1].description\n        };\n        let userItemInfo = {\n            permissions : item[0].permissions\n          , ord : item[0].ord\n          , url : item[0].url\n        };\n        return [itemInfo,userItemInfo];\n    };\n\n    let item;\n    let tags = [];\n\n    $: if(itemId) {\n        itemRequest =\n            Promise.all([\n              fetch(`${api}/${itemNamePlural}/${itemId}`)\n                .then( res => res.json() )\n            , fetch(`${api}/${itemNamePlural}/${itemId}/tags`)\n                .then( res => res.json() )\n            ]).then( res => {\n                let [i0,t0] = res;\n                item = processItem(i0);\n                tags = t0.map(tag => tag.name);\n                return res;\n            });\n    }\n    function processItem(item) {\n        return processItemCallback(item);\n    } \n    function itemInfoExtract(item) {\n        return itemInfoExtractCallback(item);\n    } \n    function submitChanges () {\n        if( itemIsValid(item) ) {\n            submitHandler(item,dispatch);\n        }\n    }\n    function cancelChanges () {\n        dispatch(\"cancel\");\n    }\n\n</script>\n<style>\n    form {\n        margin: 0;\n    }\n    .form-controls {\n        padding: 1rem;\n        padding-top: 0;\n        text-align:center;\n    }\n</style>\n<form>\n    {#if itemRequest}\n    {#await itemRequest}\n    <p>...</p>\n    {:then}\n    <fieldset>\n        <legend>{legend}</legend>\n        <Unique let:uniqueId={uniqueId}>\n            <slot {item} {uniqueId}>\n                <div>\n                    <label for=\"item-name-{uniqueId}\">Name</label>\n                    <input id=\"item-name-{uniqueId}\" type=\"text\" bind:value={item[1].name}>\n                </div>\n                <div>\n                    <label for=\"item-description-{uniqueId}\">Description</label>\n                    <input id=\"item-description-{uniqueId}\" type=\"text\" bind:value={item[1].description}>\n                </div>\n                <div>\n                    <label for=\"item-url-{uniqueId}\">Url</label>\n                    <input id=\"item-url-{uniqueId}\" type=\"text\" bind:value={item[0].url}>\n                </div>\n                <div>\n                    <label for=\"item-tags-{uniqueId}\">Tags</label>\n                    <Tags id=\"item-tags-{uniqueId}\" bind:tags />\n                </div>\n                <div>\n                    <label for=\"item-permissions-{uniqueId}\">Permissions</label>\n                    <Permissions id=\"item-permissions-{uniqueId}\" bind:value={item[0].permissions} />\n                </div>\n            </slot>\n        </Unique>\n    </fieldset>\n    <div class=\"form-controls\">\n        <button type=\"button\" on:click={submitChanges}>{submitText}</button> \n        <button type=\"button\" on:click={cancelChanges}>{cancelText}</button>\n    </div>\n    {:catch err}\n    <p>Error: {err.message}</p>\n    {/await}\n    {/if}\n</form>\n",
    "<script>\n    import { createEventDispatcher } from 'svelte';\n    import Alert from \"svelte-material-icons/Alert.svelte\";\n    import Modal from \"./Modal.html\";\n\n\tconst dispatch = createEventDispatcher();\n\n    export let shown = false;\n    export let iconComponent = Alert;\n    export let iconColor = \"#f80\";\n    export let iconSize = 24;\n    export let iconProps = {\n        color: iconColor\n     ,  size: iconSize\n    };\n    export let modalClass = \"modal-window\";\n    export let message = \"Are you sure?\";\n    export let confirmLabel = \"Confirm\";\n    export let cancelLabel = \"Cancel\";\n</script>\n<style>\n    .alert-confirm {\n        display: flex;\n        flex-direction:column;\n        padding: 1rem;\n    }\n    .alert-confirm-message {\n        flex-grow: 1;\n        display: flex;\n    }\n    .alert-confirm-message > * {\n        padding: 0.5rem;\n    }\n    .alert-confirm-message-text {\n        flex-grow: 1;\n    }\n    .alert-confirm-controls {\n        text-align: center;\n    }\n</style>\n<Modal bind:shown={shown} modalClass={modalClass}>\n    <div class=\"alert-confirm\">\n        <div class=\"alert-confirm-message\">\n            <div class=\"alert-confirm-icon\">\n                <svelte:component this={iconComponent} {...iconProps} />\n            </div>\n            <div class=\"alert-confirm-message-text\">\n                {message}\n            </div>\n        </div>\n        <div class=\"alert-confirm-controls\">\n            <button type=\"button\" on:click={e => dispatch(\"confirm\")}>{confirmLabel}</button>\n            <button type=\"button\" on:click={e => dispatch(\"cancel\")}>{cancelLabel}</button> \n        </div>\n    </div>\n</Modal>\n",
    "<script>\n    import { fade } from \"svelte/transition\";\n\n    export let shown = false;\n    export let modalClass = \"modal-window\";\n\n    function showModal() {\n        shown = true;\n    }\n\n    function hideModal() {\n        shown = false;\n    }\n</script>\n<style>\n    .shadow-box {\n        position:fixed;\n        top:0;\n        bottom:0;\n        left:0;\n        right:0;\n        background: rgba(30,30,30,0.8);\n        padding: 50px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    .modal-window {\n        background: var(--bg-color-3);\n        width: 350px;\n        margin-top: -25%;\n    }\n</style>\n{#if shown}\n<div transition:fade=\"{{ duration: 200 }}\" class=\"shadow-box\">\n    <div class={modalClass}>\n        <slot></slot>\n    </div>\n</div>\n{/if}\n"
  ],
  "names": [],
  "mappings": "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"
}